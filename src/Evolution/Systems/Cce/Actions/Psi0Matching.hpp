// Distributed under the MIT License.
// See LICENSE.txt for details.

#pragma once

#include <cstddef>
#include <tuple>
#include <utility>

#include "DataStructures/DataBox/DataBox.hpp"
#include "Evolution/Systems/Cce/NewmanPenrose.hpp"
#include "Evolution/Systems/Cce/PreSwshDerivatives.hpp"

namespace Cce {
namespace Actions {

/*!
 * \ingroup ActionsGroup
 * \brief Calculate \f$\Psi_0\f$ and its radial derivative
 * \f$\partial_\underline{\lambda}\Psi_0\f$ at the inner boundary of
 * the CCE grid.
 *
 * \details This action is to be called after `Tags::BondiJ` has been updated.
 * Note that `Tags::BondiJ` is in the asymptotically inertial frame, while the
 * returned \f$\Psi_0\f$ and its radial derivative are in the Cauchy frame.
 * \f$\underline \lambda\f$ is an affine parameter along the null
 * rays generated by \f$l\f$, see Eq. (19a) of \cite Moxon2020gha.
 */
struct CalculatePsi0AndDerivAtInnerBoundary {
  using const_global_cache_tags = tmpl::list<Tags::LMax>;
  using mutators =
      tmpl::list<TransformBondiJToCauchyCoords,
                 PreSwshDerivatives<Tags::Dy<Tags::BondiJCauchyView>>,
                 PreSwshDerivatives<Tags::Dy<Tags::Dy<Tags::BondiJCauchyView>>>,
                 VolumeWeyl<Tags::Psi0Match>, TetradCoefficients,
                 PreSwshDerivatives<Tags::Dy<Tags::Psi0Match>>,
                 InnerBoundaryWeyl>;

  template <typename DbTags, typename... InboxTags, typename Metavariables,
            typename ArrayIndex, typename ActionList,
            typename ParallelComponent>
  static Parallel::iterable_action_return_t apply(
      db::DataBox<DbTags>& box,
      const tuples::TaggedTuple<InboxTags...>& /*inboxes*/,
      const Parallel::GlobalCache<Metavariables>& /*cache*/,
      const ArrayIndex& /*array_index*/, const ActionList /*meta*/,
      const ParallelComponent* const /*meta*/) {
    tmpl::for_each<mutators>([&box](auto mutator_v) {
      using mutator = typename decltype(mutator_v)::type;
      db::mutate_apply<mutator>(make_not_null(&box));
    });
    return {Parallel::AlgorithmExecution::Continue, std::nullopt};
  }
};
}  // namespace Actions
}  // namespace Cce
